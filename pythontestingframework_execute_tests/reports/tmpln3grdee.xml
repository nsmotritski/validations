<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="1" tests="4" time="14.988" timestamp="2021-11-22T10:26:21.132827" hostname="Nikolai"><testcase classname="pythontestingframework_execute_tests.tests.test_parameterized" name="test_one_database[test_pre_stage_pool_pass_guest_visits]" file="pythontestingframework_execute_tests\tests\test_parameterized.py" line="41" time="6.722"><failure message="AssertionError: assert False&#10; +  where False = &lt;function lists_equal at 0x000001E4E5339280&gt;([{'AdultsCount': 1, 'ClubId': 151, 'CreatedDate': datetime.datetime(2021, 11, 19, 6, 16, 3, 107000), 'EmployeePartyId'... 1, 'ClubId': 151, 'CreatedDate': datetime.datetime(2021, 11, 19, 6, 18, 34, 27000), 'EmployeePartyId': 10317764, ...}], [{'AdultsCount': 2, 'ClubId': 151, 'CreatedDate': datetime.datetime(2020, 3, 31, 1, 15, 37, 557000), 'EmployeePartyId'...lubId': 151, 'CreatedDate': datetime.datetime(2020, 3, 31, 15, 46, 50, 767000), 'EmployeePartyId': 10125333, ...}, ...])&#10; +    where &lt;function lists_equal at 0x000001E4E5339280&gt; = utils.lists_equal">values = ['lt_udw_qa_akv', 'lt_udw_qa.pre_stage_pool_pass_GuestVisits.sql', 'lt_udw_qa.stage_pool_pass_GuestVisits.sql', '[Feroz]']

    @pytest.mark.parametrize("values", get_data('test_data_one_db.csv', index=1),
                             ids=get_data('test_data_one_db.csv'))
    def test_one_database(values):
        #   Step 1: Get connection string from command line argument if defined
        # if db_conn == "default db_conn":
        #    db_conn = connections.lt_udw_qa_conn
    
        db = Database(Database.get_connection(values[0], output_file=False))
    
        #   Step 2: Get data from source table
        records_source = db.get_query_results(values[1])
    
        #   Step 3: Get data from target table
        records_target = db.get_query_results(values[2])
    
        #   Step 4: Assert that the lists are equal and target table doesn't have duplicates
&gt;       assert utils.lists_equal(records_source, records_target)
E       AssertionError: assert False
E        +  where False = &lt;function lists_equal at 0x000001E4E5339280&gt;([{'AdultsCount': 1, 'ClubId': 151, 'CreatedDate': datetime.datetime(2021, 11, 19, 6, 16, 3, 107000), 'EmployeePartyId'... 1, 'ClubId': 151, 'CreatedDate': datetime.datetime(2021, 11, 19, 6, 18, 34, 27000), 'EmployeePartyId': 10317764, ...}], [{'AdultsCount': 2, 'ClubId': 151, 'CreatedDate': datetime.datetime(2020, 3, 31, 1, 15, 37, 557000), 'EmployeePartyId'...lubId': 151, 'CreatedDate': datetime.datetime(2020, 3, 31, 15, 46, 50, 767000), 'EmployeePartyId': 10125333, ...}, ...])
E        +    where &lt;function lists_equal at 0x000001E4E5339280&gt; = utils.lists_equal

pythontestingframework_execute_tests\tests\test_parameterized.py:58: AssertionError</failure></testcase><testcase classname="pythontestingframework_execute_tests.tests.test_parameterized" name="test_one_database[test_stage_pool_pass_GuestVisits]" file="pythontestingframework_execute_tests\tests\test_parameterized.py" line="41" time="3.742"><failure message="AssertionError: assert False&#10; +  where False = &lt;function lists_equal at 0x000001E4E5339280&gt;([], [{'Description': 'Membership', 'InsertedDateTime': datetime.datetime(2016, 10, 13, 10, 41, 14, 563000), 'SortOrder': 1...ertedDateTime': datetime.datetime(2017, 11, 16, 5, 39, 29, 587000), 'SortOrder': 6, 'UpdatedDateTime': None, ...}, ...])&#10; +    where &lt;function lists_equal at 0x000001E4E5339280&gt; = utils.lists_equal">values = ['lt_udw_qa_akv', 'lt_udw_qa.pre_stage_mms_ValAcquisitionType.sql', 'lt_udw_qa.stage_mms_Val_Acquisition_Type.sql', '[Feroz]']

    @pytest.mark.parametrize("values", get_data('test_data_one_db.csv', index=1),
                             ids=get_data('test_data_one_db.csv'))
    def test_one_database(values):
        #   Step 1: Get connection string from command line argument if defined
        # if db_conn == "default db_conn":
        #    db_conn = connections.lt_udw_qa_conn
    
        db = Database(Database.get_connection(values[0], output_file=False))
    
        #   Step 2: Get data from source table
        records_source = db.get_query_results(values[1])
    
        #   Step 3: Get data from target table
        records_target = db.get_query_results(values[2])
    
        #   Step 4: Assert that the lists are equal and target table doesn't have duplicates
&gt;       assert utils.lists_equal(records_source, records_target)
E       AssertionError: assert False
E        +  where False = &lt;function lists_equal at 0x000001E4E5339280&gt;([], [{'Description': 'Membership', 'InsertedDateTime': datetime.datetime(2016, 10, 13, 10, 41, 14, 563000), 'SortOrder': 1...ertedDateTime': datetime.datetime(2017, 11, 16, 5, 39, 29, 587000), 'SortOrder': 6, 'UpdatedDateTime': None, ...}, ...])
E        +    where &lt;function lists_equal at 0x000001E4E5339280&gt; = utils.lists_equal

pythontestingframework_execute_tests\tests\test_parameterized.py:58: AssertionError</failure></testcase><testcase classname="pythontestingframework_execute_tests.tests.test_parameterized" name="test_one_database[test_stage_mms_LTF_Key_Type]" file="pythontestingframework_execute_tests\tests\test_parameterized.py" line="41" time="3.626"><failure message="AssertionError: assert False&#10; +  where False = &lt;function lists_equal at 0x000001E4E5339280&gt;([], [{'inserted_date_time': datetime.datetime(2017, 12, 27, 11, 41, 12, 987000), 'ltf_key_id': 16, 'ltf_key_type_id': 1, '...etime(2018, 12, 7, 10, 13, 23, 293000), 'ltf_key_id': 368, 'ltf_key_type_id': 11, 'updated_date_time': None, ...}, ...])&#10; +    where &lt;function lists_equal at 0x000001E4E5339280&gt; = utils.lists_equal">values = ['lt_udw_qa_akv', 'lt_udw_qa.pre_stage_mms_LTF_Key_Type.sql', 'lt_udw_qa.stage_mms_LTF_Key_Type.sql', '[Feroz]']

    @pytest.mark.parametrize("values", get_data('test_data_one_db.csv', index=1),
                             ids=get_data('test_data_one_db.csv'))
    def test_one_database(values):
        #   Step 1: Get connection string from command line argument if defined
        # if db_conn == "default db_conn":
        #    db_conn = connections.lt_udw_qa_conn
    
        db = Database(Database.get_connection(values[0], output_file=False))
    
        #   Step 2: Get data from source table
        records_source = db.get_query_results(values[1])
    
        #   Step 3: Get data from target table
        records_target = db.get_query_results(values[2])
    
        #   Step 4: Assert that the lists are equal and target table doesn't have duplicates
&gt;       assert utils.lists_equal(records_source, records_target)
E       AssertionError: assert False
E        +  where False = &lt;function lists_equal at 0x000001E4E5339280&gt;([], [{'inserted_date_time': datetime.datetime(2017, 12, 27, 11, 41, 12, 987000), 'ltf_key_id': 16, 'ltf_key_type_id': 1, '...etime(2018, 12, 7, 10, 13, 23, 293000), 'ltf_key_id': 368, 'ltf_key_type_id': 11, 'updated_date_time': None, ...}, ...])
E        +    where &lt;function lists_equal at 0x000001E4E5339280&gt; = utils.lists_equal

pythontestingframework_execute_tests\tests\test_parameterized.py:58: AssertionError</failure></testcase><testcase classname="pythontestingframework_execute_tests.tests.test_parameterized" name="test_two_databases[values0]" file="pythontestingframework_execute_tests\tests\test_parameterized.py" line="72" time="0.001"><skipped type="pytest.skip" message="got empty parameter set ['values'], function test_two_databases at D:\ISsoft\Life Time\ebi-pythontestingframework-function-qa\pythontestingframework_execute_tests\tests\test_parameterized.py:72">D:\ISsoft\Life Time\ebi-pythontestingframework-function-qa\pythontestingframework_execute_tests\tests\test_parameterized.py:73: got empty parameter set ['values'], function test_two_databases at D:\ISsoft\Life Time\ebi-pythontestingframework-function-qa\pythontestingframework_execute_tests\tests\test_parameterized.py:72</skipped></testcase></testsuite></testsuites>